name: starter
version: v2beta1

# This is a list of `pipelines` that DevSpace can execute (you can define your own)
pipelines:
  # You can run this pipeline via `devspace deploy` (or `devspace run-pipeline deploy`)
  deploy:
    run: |-
      run_dependencies --all                            # 1. Deploy any projects this project needs (see "dependencies")
      build_images --all -t $(git describe --always)    # 2. Build, tag (git commit hash) and push all images (see "images")
      create_deployments --all                          # 3. Deploy Helm charts and manifests specfied as "deployments"
  # This is the pipeline for the main command: `devspace dev` (or `devspace run-pipeline dev`)
  dev:
    run: |-
      build_images --all --skip-push
      run_dependencies --all       # 1. Deploy any projects this project needs (see "dependencies")
      create_deployments --all     # 2. Deploy Helm charts and manifests specfied as "deployments"
      start_dev server             # 3. Start dev mode "app" (see "dev" section)
      start_dev db-migration
      start_dev gql

# This is a list of `deployments` that DevSpace can create for this project
deployments:
  starter:
    updateImageTags: true
    kubectl:
      manifests:
        - ./k8s/kustomization/overlays/dev/kustomization.yaml
      kustomize: true

# This is a list of `dev` containers that are based on the containers created by your deployments
dev:
  server:
    imageSelector: starter/server
    env:
      - name: DEBUG
        value: "true"
      - name: NODE_ENV
        value: "local"
    workingDir: /app
    open:
      - url: https://server.local.starter.com/graphiql
    # Replace the container image with this dev-optimized image (allows to skip image building during development)
    # Sync files between the local filesystem and the development container
    devImage: starter/server-dev
    sync:
      - path: ./
        excludePaths:
          - "**"
          - "!/package.json"
          - "!/yarn.lock"
          - "!/tsconfig.json"
      - path: ./@app:./@app
        startContainer: true
        excludePaths:
          - "**"
          - "!/server/"
        uploadExcludePaths:
          - .docker
          - .env
          - .vscode
          - "@app/e2e"
          - "*Dockerfile*"
          - "*docker-compose*"
          - "**/.DS_Store"
          - "**/.next"
          - "**/node_modules"
          - "**/dist"
          - "**/__tests__"
        onUpload:
          exec:
            - command: |-
                yarn install
              onChange: ["./@app/server/package.json"]
      - path: ./schemas:./schemas
    # Open a terminal and use the following command to start it
    # terminal:
    # command: ./devspace_start.sh
    # Inject a lightweight SSH server into the container (so your IDE can connect to the remote dev env)
    ssh:
      enabled: true
    restartHelper:
      inject: true
    logs:
      enabled: true
      lastLines: 100
    command:
      - yarn
      - server
      - dev
    # Make the following commands from my local machine available inside the dev container
    # proxyCommands:
    #   - command: devspace
    #   - command: kubectl
    #   - command: helm
    #   - command: git
    # Forward the following ports to be able access your application via localhost
    # ports:
    #   - port: "9229"
  db-migration:
    imageSelector: starter/db-migration
    devImage: starter/db-migration-dev
    env:
      - name: DEBUG
        value: "true"
      - name: NODE_ENV
        value: "local"
    workingDir: /app
    sync:
      - path: ./
        excludePaths:
          - "**"
          - "!/package.json"
          - "!/yarn.lock"
          - "!/tsconfig.json"
      - path: ./@app:./@app
        excludePaths:
          - "**"
          - "!/db/"
        uploadExcludePaths:
          - .docker
          - .env
          - .vscode
          - "@app/e2e"
          - "*Dockerfile*"
          - "*docker-compose*"
          - "**/.DS_Store"
          - "**/.next"
          - "**/node_modules"
          - "**/dist"
          - "**/__tests__"
      - path: ./schemas:./schemas
    ssh:
      enabled: true
    # restartHelper:
    #   inject: true
    logs:
      enabled: true
      lastLines: 100
    # command:
    #   - yarn
    #   - db
    #   - watch
  gql:
    imageSelector: starter/db-migration-dev
    env:
      - name: DEBUG
        value: "true"
      - name: NODE_ENV
        value: "local"
    workingDir: /app
    sync:
      - path: ./
        excludePaths:
          - "**"
          - "!/package.json"
          - "!/yarn.lock"
          - "!/tsconfig.json"
      - path: ./@app:./@app
        excludePaths:
          - "**"
          - "!/gql/"
          - "!/client/"
        uploadExcludePaths:
          - .docker
          - .env
          - .vscode
          - "@app/e2e"
          - "*Dockerfile*"
          - "*docker-compose*"
          - "**/.DS_Store"
          - "**/.next"
          - "**/node_modules"
          - "**/dist"
          - "**/__tests__"
      - path: ./schemas:./schemas
    ssh:
      enabled: true
    restartHelper:
      inject: true
    logs:
      enabled: true
      lastLines: 100
    command:
      - yarn
      - gql
      - watch

# Use the `commands` section to define repeatable dev workflows for this project
commands:
  migrate-db:
    command: |-
      echo 'This is a cross-platform, shared command that can be used to codify any kind of dev task.'
      echo 'Anyone using this project can invoke it via "devspace run migrate-db"'

# Define dependencies to other projects with a devspace.yaml
# dependencies:
#   api:
#     git: https://...  # Git-based dependencies
#     tag: v1.0.0
#   ui:
#     path: ./ui        # Path-based dependencies (for monorepos)

images:
  server:
    dockerfile: ./docker/Dockerfile.server
    image: starter/server
    tags:
      - ${DEVSPACE_GIT_COMMIT}
  server-dev:
    dockerfile: ./docker/Dockerfile.server.dev
    image: starter/server-dev
    tags:
      - ${DEVSPACE_GIT_COMMIT}
  db-migration:
    dockerfile: ./docker/Dockerfile.db-migration
    image: starter/db-migration
    tags:
      - ${DEVSPACE_GIT_COMMIT}
  db-migration-dev:
    dockerfile: ./docker/Dockerfile.db-migration.dev
    image: starter/db-migration-dev
    tags:
      - ${DEVSPACE_GIT_COMMIT}
  gql-dev:
    dockerfile: ./docker/Dockerfile.gql.dev
    context: ./
    image: starter/gql-dev
    tags:
      - ${DEVSPACE_GIT_COMMIT}
